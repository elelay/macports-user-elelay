# -*- coding: utf-8; mode: tcl; tab-width: 4; truncate-lines: t; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0
PortGroup			xcode 1.0

name                Notifications2Growl
version             0.1
categories-append   gnome
license             GPLv2
maintainers         elelay
platforms           darwin
description         Forwards gnome (d-bus) notifications to Growl

long_description    This is a small application forwarding gnome notifications \
                    (from applications using libnotify) to Growl

homepage            http://github.com/elelay/Notifications2Growl

fetch.type			git
git.url				https://github.com/elelay/Notifications2Growl.git


depends_lib         port:gtk2 \
                    port:atk \
                    port:glib2 \
                    port:gdk-pixbuf2 \
                    port:dbus-glib \
                    port:gettext

# StartupItem
startupitem.create		yes
startupitem.executable	/usr/bin/open -a ${xcode.destroot.path}/Notifications2Growl.app
startupitem.location	LaunchAgents

# can't prevent the private Framework from being copied !
post-destroot {
	file delete -force ${destroot}/${applications_dir}/Growl.framework
}

# link against gtk-x11 by default (see quartz variant)
xcode.build.settings GTK_TARGET=x11


variant quartz {
	xcode.build.settings GTK_TARGET=quartz
}


platform darwin 8 {
	xcode.configuration Release
}

# untested on Leopard, so only marking it as Snow Leopard
platform darwin 10 {
	xcode.configuration Release_SL
}

# this proc is overridden to remove OBJROOT=build/, SYMROOT=build/ from xcode_build_args
# otherwise, Growl builds in Growl/build instead of build
proc xcode::get_build_args {args} {
    global tcl_platform
    global configure.universal_archs configure.build_arch macosx_deployment_target
    global os.major os.arch
    global developer_dir configure.sdkroot

    set xcode_build_args ""

    # MACOSX_DEPLOYMENT_TARGET
    append xcode_build_args " MACOSX_DEPLOYMENT_TARGET=${macosx_deployment_target}"

    # ARCHS
    if {[variant_exists universal] && [variant_isset universal]} {
        append xcode_build_args " ARCHS=\"${configure.universal_archs}\""
    } else {
        append xcode_build_args " ARCHS=${configure.build_arch}"
    }

    # SDKROOT
    append xcode_build_args " SDKROOT=\"${configure.sdkroot}\""

    return $xcode_build_args
}
